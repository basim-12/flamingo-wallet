const STATE = require('STATE')
const statedb = STATE(__filename)
const { sdb, get } = statedb(fallback_module)

module.exports = total_wealth

async function total_wealth (opts = {}, protocol) {
  console.log("ðŸ”§ total_wealth called with opts:", opts)
  const { id, sdb } = await get(opts.sid)
  console.log('sid:', opts.sid, 'â†’ resolved id:', id)

  const on = {
    style: inject
  }
  // Simple fallback approach - create element directly
  const el = document.createElement('div')

  const config = await sdb.drive.get('data/opts.json')
  console.log('test', config)
  const { total = 0, usd = 1000, lightning = 0, bitcoin = 0 } = config?.raw?.value

  el.innerHTML = `
    <div style="border: 1px solid #ccc; border-radius: 10px; padding: 16px; width: 260px; background: white; font-family: Arial, sans-serif; color: black;">
      <div style="font-size: 13px; color: #555; margin-bottom: 6px;">Total wealth</div>
      <div style="font-size: 24px; font-weight: bold;">
        <span>â‚¿ ${total.toFixed(4)}</span>
        <div style="font-size: 14px; color: #888; margin-top: 2px;">= $${usd.toLocaleString()}</div>
      </div>
      <div style="display: flex; align-items: center; margin-top: 12px; font-size: 14px;">
        <!-- <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/4/4c/Lightning_Network.png/480px-Lightning_Network.png" width="16" style="margin-right: 8px;"> -->
        Lightning Wallet <span style="margin-left: auto; font-weight: 500;">${lightning.toFixed(4)}</span>
      </div>
      <div style="display: flex; align-items: center; margin-top: 12px; font-size: 14px;">
        <!-- <img src="https://cryptologos.cc/logos/bitcoin-btc-logo.png?v=029" width="16" style="margin-right: 8px;"> -->
        Bitcoin Wallet <span style="margin-left: auto; font-weight: 500;">${bitcoin.toFixed(4)}</span>
      </div>
    </div>
  `;
  
  await sdb.watch(onbatch)

  console.log("Returning element:", el)
  return el

  function inject(data) {
    console.log('Injecting style:', data)
    const sheet = new CSSStyleSheet()

    if (data?.raw) {
    sheet.replaceSync(data.raw || '') // ensure raw exists
    shadow.adoptedStyleSheets = [sheet]
    }
  }

  function onbatch (batch) {
    for (const { type, data } of batch) {
      on[type] && on[type](data)
    }
  }
}

// ============ Fallback Setup for STATE ============

function fallback_module () {
  return {
    drive: {},
    api: fallback_instance
  }

  function fallback_instance (opts = {}) {
    console.log('making opts--------------------', opts)
    return {
      drive: {
        'style/': {
          'theme.css': {
            raw: `
              :host {
                font-family: Arial, sans-serif;
              }
              .card {
                border: 1px solid #ccc;
                border-radius: 10px;
                padding: 16px;
                width: 260px;
                background: white;
                color: black;
              }
              .label {
                font-size: 13px;
                color: #555;
                margin-bottom: 6px;
              }
              .total {
                font-size: 24px;
                font-weight: bold;
              }
              .total .usd {
                font-size: 14px;
                color: #888;
                margin-top: 2px;
              }
              .wallet {
                display: flex;
                align-items: center;
                margin-top: 12px;
                font-size: 14px;
              }
              .wallet img {
                margin-right: 8px;
              }
              .wallet .amount {
                margin-left: auto;
                font-weight: 500;
              }
            `
          }
        },
        'data/': {
          'opts.json': {
            raw: opts
          }
        }
      }
    }
  }
}
