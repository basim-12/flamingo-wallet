const STATE = require('STATE')
const statedb = STATE(__filename)
const { sdb, get } = statedb(fallback_module)

const generalButton = require('general_button')

module.exports = action_buttons

async function action_buttons (opts = {}, protocol) {
  const { id, sdb } = await get(opts.sid)
  
  const {drive} = sdb

  const on = {
    style: inject,
    data: ondata
  }

  
  const _ = {up: null , send_general: null, receive_general: null, wallet_general: null}
  
  const el = document.createElement('div')
  const shadow = el.attachShadow({ mode: 'closed' })

  shadow.innerHTML = `
    <div class="action-buttons-container">
      <div id="send-button-container"></div>
      <div id="receive-button-container"></div>
      <div id="wallet-button-container"></div>
    </div>
    <style></style>
  `
  

  const style = shadow.querySelector('style')
  
  const subs = await sdb.watch(onbatch)

  let send_action = null
  if(protocol){
   send_action = protocol({ from: 'action_buttons', notify: on_message })
  }

  let sendButton, receiveButton, walletButton

  shadow.querySelector('#send-button-container').innerHTML = ''
  shadow.querySelector('#receive-button-container').innerHTML = ''
  shadow.querySelector('#wallet-button-container').innerHTML = ''

 
  sendButton = await generalButton(subs[0], send_button_protocol)
  shadow.querySelector('#send-button-container').appendChild(sendButton)

 
  receiveButton = await generalButton(subs[1], receive_button_protocol)
  shadow.querySelector('#receive-button-container').appendChild(receiveButton)

  walletButton = await generalButton(subs[2], wallet_button_protocol)
  shadow.querySelector('#wallet-button-container').appendChild(walletButton)


  _.send_general({
    type: 'button_name',
    data: {
      name: 'Send',
      action: 'send_message'
    }
  })

  
  _.receive_general({
    type: 'button_name',
    data: {
      name: 'Receive',
      action: 'receive_message'
    }
  })

  
  _.wallet_general({
    type: 'button_name',
    data: {
      name: 'Wallet',
      action: 'wallet_action'
    }
  })

  return el

  function fail(data, type) { throw new Error('invalid message', { cause: { data, type } }) }

  async function onbatch (batch) {
    for (const { type, paths } of batch){
      const data = await Promise.all(paths.map(path => drive.get(path).then(file => file.raw)))
      const func = on[type] || fail
      func(data, type)
    }
  }

  function inject (data) {
    style.replaceChildren((() => {
      return document.createElement('style').textContent = data[0]
    })())
  }

  async function ondata(data) {
    const buttonData = data[0]?.value || {}

  }

    

  function send_button_protocol(send) {
    _.send_general = send
    return on
    function on({ type, data }) {
    }
  }

  function receive_button_protocol(send) {
    _.receive_general = send
    return on
    function on({ type, data }) {
    }
  }

  function wallet_button_protocol(send) {
    _.wallet_general = send
    return on
    function on({ type, data }) {
    }
  }

  function on_message(message) {
    if (message.type === 'button_click') {
      console.log(`Action button "${message.text}" clicked with action: ${message.action}`)

      // Handle different button actions
      switch(message.action) {
        case 'send_message':
          console.log('Send button clicked - handling send action')
          break
        case 'receive_message':
          console.log('Receive button clicked - handling receive action')
          break
        case 'wallet_action':
          console.log('Wallet button clicked - handling wallet action')
          break
        default:
          console.log(`Unknown action: ${message.action}`)
      }
    }
  }
}

// ============ Fallback Setup for STATE ============

function fallback_module () {
  return {
    _: {
      'general_button': {
        $: ''
      }
    },
    api: fallback_instance
  }

  function fallback_instance (opts = {}) {
    return {
      _: {
        'general_button': {
         0: '',
         1: '',
         2: '',
         mapping :{
          style: 'style',
          data: 'data'
        }
        },
      },
      drive: {
        'style/': {
          'action_buttons.css': {
           '$ref':'action_buttons.css'
          }
        },
        'data/': {
          'opts.json': {
            raw: opts
          }
        }
      }
    }
  }
}
